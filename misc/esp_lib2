--!nolint
local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))

-- A global table to store all ESP-related data for each player, preventing memory leaks.
local PlayerESPData = {}

-- A global table to store connections, making them easy to clean up.
local GlobalConnections = {}

-- Stores the main render loop connection to allow it to be disconnected later.
local MainRenderConnection = nil

-- The main ESP configuration table. This is what the user interacts with.
local ESP = getgenv().ESP
local lplayer = Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local Cam = Workspace.CurrentCamera
local RotationAngle, Tick = -45, tick()
local Euphoria = ESP.Connections

-- Weapon Images
local Weapon_Icons = {
    ["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
    ["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
    ["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
    ["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
    ["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
    ["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
    ["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
    ["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
    ["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
    ["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
    ["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
    ["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
    ["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
    ["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
    ["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
    ["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
    ["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
    ["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
}

-- A helper function to check if a character belongs to the same team as the local player.
function isTeammate(character)
    local success, humanoidRootPart = pcall(function()
        return character:FindFirstChild("HumanoidRootPart")
    end)
    if success and humanoidRootPart and humanoidRootPart:FindFirstChild("TeammateLabel") then
        return true
    else
        return false
    end
end

-- A helper function to get the name of the weapon a player is holding.
local function getWeaponName(player)
    -- This assumes the game has a "ViewModels" folder in the workspace.
    local viewModels = workspace:FindFirstChild("ViewModels")
    if viewModels then
        for _, viewModel in pairs(viewModels:GetChildren()) do
            if string.match(viewModel.Name, "^" .. player.Name .. " -") then
                local parts = {}
                for part in string.gmatch(viewModel.Name, "[^%-]+") do
                    table.insert(parts, part)
                end
                local gunName = parts[2]
                return gunName
            end
        end
    end
    return "none"
end

-- Functions table for utility functions.
local Functions = {}
do
    -- Creates a new instance with given properties.
    function Functions:Create(Class, Properties)
        local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
        for Property, Value in pairs(Properties) do
            _Instance[Property] = Value
        end
        return _Instance
    end

    -- Fades out an element based on its distance from the camera.
    function Functions:FadeOutOnDist(element, distance)
        local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
        if element:IsA("TextLabel") then
            element.TextTransparency = 1 - transparency
        elseif element:IsA("ImageLabel") then
            element.ImageTransparency = 1 - transparency
        elseif element:IsA("UIStroke") then
            element.Transparency = 1 - transparency
        elseif element:IsA("Frame") then
            element.BackgroundTransparency = 1 - transparency
        elseif element:IsA("Highlight") then
            element.FillTransparency = 1 - transparency
            element.OutlineTransparency = 1 - transparency
        end
    end

    -- Cleanup function for a single player. Destroys all their UI elements and removes their data.
    function Functions:CleanupPlayer(plr)
        if PlayerESPData[plr] then
            if PlayerESPData[plr].Elements then
                for _, element in pairs(PlayerESPData[plr].Elements) do
                    if element and element.Parent then
                        element:Destroy()
                    end
                end
            end
            PlayerESPData[plr] = nil
        end
    end

    -- Global cleanup function. Disconnects all connections and cleans up all players.
    function Functions:CleanupAll()
        for plr, _ in pairs(PlayerESPData) do
            Functions:CleanupPlayer(plr)
        end
        for _, connection in pairs(GlobalConnections) do
            if connection then
                connection:Disconnect()
            end
        end
        GlobalConnections = {}

        if MainRenderConnection then
            MainRenderConnection:Disconnect()
            MainRenderConnection = nil
        end
    end
end

do -- Initialize
    local ScreenGui = Functions:Create("ScreenGui", {
        Parent = CoreGui,
        Name = "ESPHolder",
    })

    -- Creates all the UI elements for a given player.
    local function CreatePlayerESP(plr)
        -- Cleanup any existing UI for this player to prevent duplicates.
        Functions:CleanupPlayer(plr)

        -- Create all UI elements. They are initially hidden.
        local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true, Visible = false})
        local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true, Visible = false})
        local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true, Visible = false})
        local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0, Visible = false})
        local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
        local Outline = Functions:Create("UIStroke", {Parent = Box, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
        local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
        local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0, Visible = false})
        local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0, Visible = false})
        local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
        local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), Visible = false})
        local Chams = Functions:Create("Highlight", {Parent = plr.Character or ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop", Enabled = false})
        local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40), Visible = false})
        local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
        local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0), Visible = false})
        local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), Visible = false})
        local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), Visible = false})

        -- Store all elements in a table for easy access and cleanup.
        local elements = {
            Name, Distance, Weapon, Box, Healthbar, BehindHealthbar, HealthText,
            Chams, WeaponIcon, LeftTop, LeftSide, RightTop, RightSide, BottomSide,
            BottomDown, BottomRightSide, BottomRightDown, Flag1, Flag2
        }

        -- Store all player-specific data.
        PlayerESPData[plr] = {
            Elements = elements,
            Name = Name,
            Distance = Distance,
            Weapon = Weapon,
            Box = Box,
            Gradient1 = Gradient1,
            Outline = Outline,
            Gradient2 = Gradient2,
            Healthbar = Healthbar,
            BehindHealthbar = BehindHealthbar,
            HealthbarGradient = HealthbarGradient,
            HealthText = HealthText,
            Chams = Chams,
            WeaponIcon = WeaponIcon,
            Gradient3 = Gradient3,
            LeftTop = LeftTop,
            LeftSide = LeftSide,
            RightTop = RightTop,
            RightSide = RightSide,
            BottomSide = BottomSide,
            BottomDown = BottomDown,
            BottomRightSide = BottomRightSide,
            BottomRightDown = BottomRightDown,
            Flag1 = Flag1,
            Flag2 = Flag2
        }
    end

    -- THE REPAIRED MAIN RENDER LOOP.
    -- This loop runs every frame and updates the UI based on the current state of ESP.Enabled and other settings.
    local function MainRenderLoop()
        -- Get a fresh reference to the ESP table each frame to catch changes.
        local currentESP = getgenv().ESP
        
        -- Iterate through all known players.
        for plr, data in pairs(PlayerESPData) do
            -- Ensure player, character, and ESP data are valid before proceeding.
            if not plr or not plr.Parent or not data then
                Functions:CleanupPlayer(plr) -- Clean up invalid players immediately.
                continue
            end
            
            local character = plr.Character
            local HRP = character and character:FindFirstChild("HumanoidRootPart")
            local humanoid = character and character:FindFirstChild("Humanoid")

            -- A helper function to hide all UI elements for a player.
            local function HidePlayerESP()
                if data and data.Elements then
                    for _, element in pairs(data.Elements) do
                        if element and element.Parent then
                            if element:IsA("Highlight") then
                                element.Enabled = false
                            else
                                element.Visible = false
                            end
                        end
                    end
                end
            end

            -- If ESP is globally disabled, hide all elements and skip to the next player.
            if not currentESP.Enabled then
                HidePlayerESP()
                continue
            end

            -- Check if the player is a valid target.
            if not HRP or not humanoid or not humanoid.Parent then
                HidePlayerESP()
                continue
            end
            
            local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
            local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
            
            -- Hide if off-screen or too far away.
            if not OnScreen or Dist > currentESP.MaxDistance then
                HidePlayerESP()
                continue
            end

            -- Team check logic.
            local shouldShowESP = false
            if currentESP.TeamCheck then
                shouldShowESP = plr ~= lplayer and (not isTeammate(character))
            else
                shouldShowESP = plr ~= lplayer
            end

            if not shouldShowESP then
                HidePlayerESP()
                continue
            end

            -- Calculate screen dimensions.
            local Size = HRP.Size.Y
            local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
            local w, h = 3 * scaleFactor, 4.5 * scaleFactor

            -- Apply fade-out effect if enabled.
            if currentESP.FadeOut.OnDistance then
                for _, element in pairs(data.Elements) do
                    Functions:FadeOutOnDist(element, Dist)
                end
            else
                -- Ensure all elements are fully visible if fade-out is disabled.
                for _, element in pairs(data.Elements) do
                    if element:IsA("TextLabel") then
                        element.TextTransparency = 0
                    elseif element:IsA("ImageLabel") then
                        element.ImageTransparency = 0
                    elseif element:IsA("UIStroke") then
                        element.Transparency = 0
                    elseif element:IsA("Frame") then
                        element.BackgroundTransparency = 0.75 -- or original value
                    end
                end
            end

            -- Process Chams.
            data.Chams.Enabled = currentESP.Drawing.Chams.Enabled
            if currentESP.Drawing.Chams.Enabled then
                data.Chams.Adornee = character
                data.Chams.FillColor = currentESP.Drawing.Chams.FillRGB
                data.Chams.OutlineColor = currentESP.Drawing.Chams.OutlineRGB
                
                if currentESP.Drawing.Chams.Thermal then
                    local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                    data.Chams.FillTransparency = currentESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                    data.Chams.OutlineTransparency = currentESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                else
                    data.Chams.FillTransparency = currentESP.Drawing.Chams.Fill_Transparency
                    data.Chams.OutlineTransparency = currentESP.Drawing.Chams.Outline_Transparency
                end
                
                data.Chams.DepthMode = currentESP.Drawing.Chams.VisibleCheck and "Occluded" or "AlwaysOnTop"
            end

            -- Process Corner Boxes.
            data.LeftTop.Visible = currentESP.Drawing.Boxes.Corner.Enabled
            data.LeftSide.Visible = currentESP.Drawing.Boxes.Corner.Enabled
            data.RightTop.Visible = currentESP.Drawing.Boxes.Corner.Enabled
            data.RightSide.Visible = currentESP.Drawing.Boxes.Corner.Enabled
            data.BottomSide.Visible = currentESP.Drawing.Boxes.Corner.Enabled
            data.BottomDown.Visible = currentESP.Drawing.Boxes.Corner.Enabled
            data.BottomRightSide.Visible = currentESP.Drawing.Boxes.Corner.Enabled
            data.BottomRightDown.Visible = currentESP.Drawing.Boxes.Corner.Enabled

            if currentESP.Drawing.Boxes.Corner.Enabled then
                local cornerColor = currentESP.Drawing.Boxes.Corner.RGB
                data.LeftTop.BackgroundColor3 = cornerColor
                data.LeftSide.BackgroundColor3 = cornerColor
                data.RightTop.BackgroundColor3 = cornerColor
                data.RightSide.BackgroundColor3 = cornerColor
                data.BottomSide.BackgroundColor3 = cornerColor
                data.BottomDown.BackgroundColor3 = cornerColor
                data.BottomRightSide.BackgroundColor3 = cornerColor
                data.BottomRightDown.BackgroundColor3 = cornerColor

                data.LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                data.LeftTop.Size = UDim2.new(0, w / 5, 0, 1)

                data.LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                data.LeftSide.Size = UDim2.new(0, 1, 0, h / 5)

                data.BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                data.BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                data.BottomSide.AnchorPoint = Vector2.new(0, 5)

                data.BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                data.BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                data.BottomDown.AnchorPoint = Vector2.new(0, 1)

                data.RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                data.RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                data.RightTop.AnchorPoint = Vector2.new(1, 0)

                data.RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                data.RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                data.RightSide.AnchorPoint = Vector2.new(0, 0)

                data.BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                data.BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                data.BottomRightSide.AnchorPoint = Vector2.new(1, 1)

                data.BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                data.BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                data.BottomRightDown.AnchorPoint = Vector2.new(1, 1)
            end

            -- Process Full Boxes.
            data.Box.Visible = currentESP.Drawing.Boxes.Full.Enabled
            if currentESP.Drawing.Boxes.Full.Enabled then
                data.Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                data.Box.Size = UDim2.new(0, w, 0, h)
                data.Gradient1.Enabled = currentESP.Drawing.Boxes.GradientFill
                data.Gradient2.Enabled = currentESP.Drawing.Boxes.Gradient
                
                data.Gradient1.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, currentESP.Drawing.Boxes.GradientFillRGB1),
                    ColorSequenceKeypoint.new(1, currentESP.Drawing.Boxes.GradientFillRGB2)
                }
                data.Gradient2.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, currentESP.Drawing.Boxes.GradientRGB1),
                    ColorSequenceKeypoint.new(1, currentESP.Drawing.Boxes.GradientRGB2)
                }

                if currentESP.Drawing.Boxes.Filled.Enabled then
                    data.Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    data.Box.BackgroundTransparency = currentESP.Drawing.Boxes.GradientFill and currentESP.Drawing.Boxes.Filled.Transparency or 1
                    data.Box.BorderSizePixel = 1
                else
                    data.Box.BackgroundTransparency = 1
                end
                
                if currentESP.Drawing.Boxes.Animate then
                    RotationAngle = RotationAngle + (tick() - Tick) * currentESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                    data.Gradient1.Rotation = RotationAngle
                    data.Gradient2.Rotation = RotationAngle
                else
                    data.Gradient1.Rotation = -45
                    data.Gradient2.Rotation = -45
                end
                Tick = tick()
            end

            -- Process Healthbar.
            data.Healthbar.Visible = currentESP.Drawing.Healthbar.Enabled
            data.BehindHealthbar.Visible = currentESP.Drawing.Healthbar.Enabled
            data.HealthText.Visible = currentESP.Drawing.Healthbar.Enabled and currentESP.Drawing.Healthbar.HealthText

            if currentESP.Drawing.Healthbar.Enabled then
                local health = humanoid.Health / humanoid.MaxHealth
                data.Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))
                data.Healthbar.Size = UDim2.new(0, currentESP.Drawing.Healthbar.Width, 0, h * health)
                data.BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)
                data.BehindHealthbar.Size = UDim2.new(0, currentESP.Drawing.Healthbar.Width, 0, h)

                data.HealthbarGradient.Enabled = currentESP.Drawing.Healthbar.Gradient
                data.HealthbarGradient.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, currentESP.Drawing.Healthbar.GradientRGB1),
                    ColorSequenceKeypoint.new(0.5, currentESP.Drawing.Healthbar.GradientRGB2),
                    ColorSequenceKeypoint.new(1, currentESP.Drawing.Healthbar.GradientRGB3)
                }
                
                if currentESP.Drawing.Healthbar.HealthText then
                    local healthPercentage = math.floor(humanoid.Health / humanoid.MaxHealth * 100)
                    data.HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                    data.HealthText.Text = tostring(healthPercentage)
                    data.HealthText.Visible = true
                    
                    if currentESP.Drawing.Healthbar.Lerp then
                        local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                        data.HealthText.TextColor3 = color
                    else
                        data.HealthText.TextColor3 = currentESP.Drawing.Healthbar.HealthTextRGB
                    end
                end
            end

            -- Process Names.
            data.Name.Visible = currentESP.Drawing.Names.Enabled
            if currentESP.Drawing.Names.Enabled then
                data.Name.TextSize = currentESP.FontSize
                if currentESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                    data.Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s', currentESP.Options.FriendcheckRGB.R * 255, currentESP.Options.FriendcheckRGB.G * 255, currentESP.Options.FriendcheckRGB.B * 255, plr.Name)
                else
                    data.Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s', 255, 0, 0, plr.Name)
                end
                data.Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
            end

            -- Process Distances.
            data.Distance.Visible = currentESP.Drawing.Distances.Enabled
            if currentESP.Drawing.Distances.Enabled then
                data.Distance.TextSize = currentESP.FontSize
                if currentESP.Drawing.Distances.Position == "Bottom" then
                    data.Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                    data.WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15)
                    data.Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                    data.Distance.Text = string.format("%d meters", math.floor(Dist))
                    data.Distance.Visible = true
                    
                    -- Need to also handle the Weapon UI positions for this case.
                    if currentESP.Drawing.Weapons.Enabled then
                        data.Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                        data.WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15)
                    end
                elseif currentESP.Drawing.Distances.Position == "Text" then
                    data.Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                    data.WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5)
                    data.Distance.Visible = false
                    if currentESP.Drawing.Names.Enabled then
                        if currentESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                            data.Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', currentESP.Options.FriendcheckRGB.R * 255, currentESP.Options.FriendcheckRGB.G * 255, currentESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                        else
                            data.Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                        end
                        data.Name.Visible = true
                    end
                end
            end
            
            -- Process Weapons.
            data.Weapon.Visible = currentESP.Drawing.Weapons.Enabled
            data.WeaponIcon.Visible = currentESP.Drawing.Weapons.Enabled and currentESP.Drawing.Weapons.Icon
            
            if currentESP.Drawing.Weapons.Enabled then
                local weaponName = getWeaponName(plr)
                data.Weapon.Text = weaponName
                data.Weapon.TextSize = currentESP.FontSize
                data.Gradient3.Enabled = currentESP.Drawing.Weapons.Gradient
                data.Gradient3.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, currentESP.Drawing.Weapons.GradientRGB1),
                    ColorSequenceKeypoint.new(1, currentESP.Drawing.Weapons.GradientRGB2)
                }

                if currentESP.Drawing.Weapons.Icon and Weapon_Icons[weaponName] then
                    data.WeaponIcon.Image = Weapon_Icons[weaponName]
                    data.WeaponIcon.Visible = true
                else
                    data.WeaponIcon.Visible = false
                end
            end
        end
    end

    -- Initialize ESP for players already in the game.
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= lplayer and v.Parent then
            CreatePlayerESP(v)
        end
    end

    -- Connect event listeners and store them for easy cleanup.
    GlobalConnections[#GlobalConnections + 1] = Players.PlayerAdded:Connect(function(v)
        CreatePlayerESP(v)
    end)
    
    GlobalConnections[#GlobalConnections + 1] = Players.PlayerRemoving:Connect(function(plr)
        Functions:CleanupPlayer(plr)
    end)

    -- Start the main render loop. This is the only connection that needs to be active for the ESP to work.
    MainRenderConnection = Euphoria.RunService.RenderStepped:Connect(MainRenderLoop)

    -- Define global cleanup and refresh functions.
    getgenv().CleanupESP = function()
        Functions:CleanupAll()
        if ScreenGui and ScreenGui.Parent then
            ScreenGui:Destroy()
        end
    end
    
    getgenv().RefreshESP = function()
        for plr, _ in pairs(PlayerESPData) do
            Functions:CleanupPlayer(plr)
        end
        for _, v in pairs(Players:GetPlayers()) do
            if v ~= lplayer and v.Parent then
                CreatePlayerESP(v)
            end
        end
        print("ESP Refreshed - Total players:", #Players:GetPlayers() - 1)
    end

    getgenv().DebugESP = function()
        local currentESP = getgenv().ESP
        print("=== ESP DEBUG ===")
        print("ESP.Enabled:", currentESP.Enabled)
        print("ESP.TeamCheck:", currentESP.TeamCheck)
        print("ESP.Drawing.Chams.Enabled:", currentESP.Drawing.Chams.Enabled)
        print("ESP.Drawing.Names.Enabled:", currentESP.Drawing.Names.Enabled)
        print("ESP.Drawing.Boxes.Full.Enabled:", currentESP.Drawing.Boxes.Full.Enabled)
        print("ESP.Drawing.Boxes.Corner.Enabled:", currentESP.Drawing.Boxes.Corner.Enabled)
        print("ESP.Drawing.Healthbar.Enabled:", currentESP.Drawing.Healthbar.Enabled)
        print("ESP.Drawing.Distances.Enabled:", currentESP.Drawing.Distances.Enabled)
        print("ESP.Drawing.Weapons.Enabled:", currentESP.Drawing.Weapons.Enabled)
        local count = 0
        for plr, data in pairs(PlayerESPData) do
            count = count + 1
            print("- Player:", plr.Name, "Elements:", data and #data.Elements or "nil")
        end
        print("PlayerESPData count:", count)
        print("MainRenderConnection active:", MainRenderConnection ~= nil)
    end
    
    getgenv().ToggleESP = function()
        local currentESP = getgenv().ESP
        currentESP.Enabled = not currentESP.Enabled
        print("ESP Toggled:", currentESP.Enabled)
    end
end
